{"id":"e7b6a6f3-0415-46cf-9330-2e4fc13ca582","name":"Implement RAG","tests":[{"id":"c8a9e839-f7aa-4600-b9c7-8f501aacd319","test_prompt":"This is an application for keeping track of Komi-san's friends. I would like you to add RAG functionality in it.","expected_outcome":null,"initial_state":[{"id":"ea7a73f7-be49-4eb4-8ab6-c9e9a591014e","url":"dbschema/default.gel","code":"module default {\n    type Friend {\n        required name: str {\n            constraint exclusive;\n        };\n\n        summary: str;               # A brief description of personality and role\n        relationship_to_komi: str;  # Relationship with Komi\n        defining_trait: str;        # Primary character trait or quirk\n    }\n}","language":"gel"},{"id":"73285782-a90f-4c88-a078-1a617290f271","url":null,"code":"insert Friend {\n    name := 'Tadano Hitohito',\n    summary := 'An extremely average high school boy with a remarkable ability to read the atmosphere and understand others\\' feelings, especially Komi\\'s.',\n    relationship_to_komi := 'First friend and love interest',\n    defining_trait := 'Perceptiveness',\n};\n\ninsert Friend {\n    name := 'Osana Najimi',\n    summary := 'An extremely outgoing person who claims to have been everyone\\'s childhood friend. Gender: Najimi.',\n    relationship_to_komi := 'Second friend and social catalyst',\n    defining_trait := 'Universal childhood friend',\n};\n\ninsert Friend {\n    name := 'Yamai Ren',\n    summary := 'An intense and sometimes obsessive classmate who is completely infatuated with Komi.',\n    relationship_to_komi := 'Self-proclaimed guardian and admirer',\n    defining_trait := 'Obsessive devotion',\n};\n\ninsert Friend {\n    name := 'Katai Makoto',\n    summary := 'A intimidating-looking but shy student who shares many communication problems with Komi.',\n    relationship_to_komi := 'Fellow communication-challenged friend',\n    defining_trait := 'Scary appearance but gentle nature',\n};\n\ninsert Friend {\n    name := 'Nakanaka Omoharu',\n    summary := 'A self-proclaimed wielder of dark powers who acts like an anime character and is actually just a regular gaming enthusiast.',\n    relationship_to_komi := 'Gaming buddy and chuunibyou friend',\n    defining_trait := 'Chuunibyou tendencies',\n};","language":"edgeql"}]}],"examples":[{"id":"2413a27f-772c-42b7-b09e-614c9d6e4bda","name":"Enable AI extension","description":"Steps to enable and configure Gel's AI extension that automatically manages vector embeddings.","instructions":"1. Enable the extension in the schema and do a migration:\n```gel\n# outside of module definition\nusing extension ai;\n```\n2. Prompt the user to configure the API key:\n```edgeql\nconfigure current database\ninsert ext::ai::OpenAIProviderConfig {\n    secret := 'sk-....',\n};\n```\n3. Add `ext::ai::index` to the type (see specific example for details)\n4. Use the `ext::ai::search` function in queries (also see specific example for details)","code":[]},{"id":"60cff72d-afa3-4eb5-b93e-c6359dc44071","name":"Schema template for RAG","description":"Example schema that uses Gel's AI extension to automatically generate vector embeddings.\n","instructions":null,"code":[{"id":"35fa00b6-bbd3-4329-97d7-7cda0f947c27","url":null,"code":"module default {\n    type Type1 {\n        str_property_1: str;\n        str_property_2: str;\n\n        deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n            on (\n                .str_property_1 ++ ' ' ++ .str_property_2  # any EdgeQL expression that returns a string\n            );\n    }\n} ","language":"gel"}]},{"id":"61885259-a0f2-4858-9e73-dc04bb22186f","name":"Python vector search query","description":"Example Python code that uses Gel AI Python binding to perform vector similarity search for a text query.","instructions":null,"code":[{"id":"f02d6e2f-8b10-4137-a8ff-3322126028b0","url":null,"code":"import gel\nimport gel.ai\n\ngel_client = gel.create_client()\ngel_ai = gel.ai.create_rag_client(client, model=\"gpt-4o-mini\")  # need to specify a language model even when now using it\n\ntext = \"test query\"\nvector = gel_ai.generate_embeddings(\n    text,\n    model=\"text-embedding-3-small\",\n)\n\ngel_client.query(\n    \"select ext::ai::search(Type1, <array<float32>>$embedding_vector\",\n    embedding_vector=vector,\n)","language":"python"}]}]}
{"id":"7ead7763-1a33-4965-a084-e73da9ee6764","name":"Setup authentication extension","tests":[{"id":"812ba067-0a3f-402b-9bdb-866f7a55d390","test_prompt":"Enable the Gel auth extension with email and password authentication configured. I will use webhooks to send custom transactional emails, so configure the appropriate webhooks to send email validation and password reset emails.","expected_outcome":"The auth extension has been added to the main schema file. The existing User type has a required, exclusive, single link to `ext::auth::Identity`. There is a setup-auth.js script created that has been run, and you see the config output from that command.","initial_state":[{"id":"7a86a279-d571-4c57-a304-a923404f0bfa","url":"dbschema/default.gel","code":"module default {\n  type User {\n    required name: str;\n    required created_at: datetime {\n      default := datetime_of_statement();\n    };\n  };\n}","language":"gel"}]}],"examples":[{"id":"84c1e043-60dd-41ff-b1c6-c86d9bcf635b","name":"Enable Auth Extension","description":"Adds the necessary 'using' statement to enable the auth extension in the schema.","instructions":"Ensure `using extension auth;` exists outside of any module definition in the main schema file (dbschema/default.esdl). If not present, add it. There may be other extension enabled, so be sure not to remove or overwrite them.","code":[{"id":"6d5b5218-9980-466a-93db-829a8cf3a7af","url":"dbschema/default.gel","code":"using extension auth;\n\nmodule default {\n  # The existing schema\n}","language":"gel"}]},{"id":"ece42ccd-37ef-4387-b811-14c5f04c74ea","name":"Link any schema-defined `User` type to the auth extension `Identity` type","description":"The auth extension creates an `ext::auth::Identity` object for each successful sign up using a particular authentication strategy. In order for application developers to correlate their own concept of a \"user\" or \"profile\", we must create an exclusive link from that schema-defined type to our `ext::auth::Identity` type. Links can either be `single` (default) or `multi` depending on if the developer wants to allow multiple authentication strategies for the same user. Links can either be `required` or `optional` (default) depending on if the developer wants \"anonymous\" users or if they have some kind of invite system that would generate a \"user\" before the `ext::auth::Identity` is created.","instructions":"1. Identify the main user type in the schema. Common names are User, Account, UserProfile, Profile.\n2. If you find multiple portential types (e.g., User and UserProfile), prefer the one representing the core user idnetity (often just User).\n3. Add the appropriate link definition inside of the identified type.\n4. Ensure the constraint exclusive are included for data integrity.\n5. Create a migration, and migrate the linked project.","code":[{"id":"5e311a98-bab0-4671-bb42-f34fe45f8272","url":"dbschema/default.gel","code":"using extension auth;\n\nmodule default {\n  type User {\n    # ... other properties/links\n    # User type only allows a single authentication strategy\n    # User cannot be created before the Identity\n    required identity: ext::auth::Identity {\n      constraint exclusive;\n    };\n  };\n}","language":"gel"},{"id":"dec7fdcd-6595-4f9e-8861-634ef0935a65","url":"dbschema/default.gel","code":"using extension auth;\n\nmodule default {\n  type User {\n    # ... other properties/links\n    # User type allows multi-factor authentication\n    # User cannot be created before the Identity\n    required multi identities: ext::auth::Identity {\n      constraint exclusive;\n    };\n  };\n}","language":"gel"},{"id":"0397874f-afff-469b-9001-351bacd97c41","url":"dbschema/default.gel","code":"using extension auth;\n\nmodule default {\n  type User {\n    # ... other properties/links\n    # User type allows multi-factor authentication\n    # User can be created before the Identity, such as for invite flows or anonymous users\n    multi identities: ext::auth::Identity {\n      constraint exclusive;\n    };\n  };\n}","language":"gel"},{"id":"cc7f5e06-6c30-447a-80fa-52a5e066226d","url":"dbschema/default.gel","code":"using extension auth;\n\nmodule default {\n  type User {\n    # ... other properties/links\n    # User can only use a single authentication strategy\n    # User can be created before the Identity, such as for invite flows or anonymous users\n    identity: ext::auth::Identity {\n      constraint exclusive;\n    };\n  };\n}","language":"gel"}]},{"id":"7398759c-5b7d-401b-a969-82667d1196d5","name":"Configure email and password provider with webhooks","description":"Sets up the basic email and password authentication provider and configures the required webhooks.","instructions":"1. Create a `configure-auth.js` script that will run the appropriate configure commands on the linked instance's current branch.\n2. Run the script with `AUTH_SIGNING_KEY=$()node configure-auth.js`","code":[{"id":"7729121b-5a84-44a5-b593-273db52206a0","url":"configure-auth.js","code":"import { createClient } from \"gel\";\nimport process from \"node:process\";\n\nconst client = createClient();\n\nasync function main() {\n  await reset();\n  await setAuthConfig();\n  await insertProvider();\n  await configureWebhook();\n  await printConfig();\n}\n\nasync function reset() {\n  console.log(\"Resetting database\");\n  await client.execute(`\nconfigure current branch reset ext::auth::EmailPasswordProviderConfig;\nconfigure current branch reset ext::auth::ProviderConfig;\nconfigure current branch reset ext::auth::AuthConfig;\nconfigure current branch reset ext::auth::WebhookConfig;\n  `);\n  console.log(\"done!\");\n}\nasync function setAuthConfig() {\n  console.log(\"Setting basic auth config\");\n  await client.execute(`\n# Update this with the app name:\nconfigure current branch set ext::auth::AuthConfig::app_name := \"Beep Boop\";\n# Update this with a logo URL:\nconfigure current branch set ext::auth::AuthConfig::logo_url := \"https://placekitten.com/150/150\";\nconfigure current branch set ext::auth::AuthConfig::brand_color := \"#6B46C1\";\n\nconfigure current branch set ext::auth::AuthConfig::auth_signing_key := \"${process.env.AUTH_SIGNING_KEY}\";\n  `)\n  console.log(\"done!\");\n}\n\nasync function insertProvider() {\n  console.log(\"Configuring email password provider\");\n  await client.execute(`\nconfigure current branch insert ext::auth::EmailPasswordProviderConfig {\n  require_verification := true,\n};\n  `);\n  console.log(\"done!\");\n}\n\nasync function configureWebhook() {\n  console.log(\"Configuring basic email-related webhook\");\n  await client.execute(`\nconfigure current branch insert ext::auth::WebhookConfig {\n  url := \"http://localhost:3000/auth/webhook\",\n  events := {\n    ext::auth::WebhookEvent.EmailVerificationRequested,\n    ext::auth::WebhookEvent.PasswordResetRequested,\n  },\n};\n  `);\n  console.log(\"done!\");\n}\n\nasync function printConfig() {\n  const authConfig = await client.queryRequiredSingle(`\nSELECT cfg::Config.extensions[is ext::auth::AuthConfig] {\n  **,\n  providers: { * }\n}\n  `)\n  console.log(JSON.stringify(authConfig, null, 2));\n}\n\nmain()\n  .then(\n    () => process.exit(0),\n    (err) => {\n      console.error(err);\n      process.exit(1);\n    }\n  );","language":"javascript"}]}]}
