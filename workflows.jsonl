{"id":"e7b6a6f3-0415-46cf-9330-2e4fc13ca582","name":"Implement RAG","tests":[{"id":"c8a9e839-f7aa-4600-b9c7-8f501aacd319","test_prompt":"This is an application for keeping track of Komi-san's friends. I would like you to add RAG functionality in it.","expected_outcome":null,"initial_state":[{"id":"ea7a73f7-be49-4eb4-8ab6-c9e9a591014e","url":"dbschema/default.gel","code":"module default {\n    type Friend {\n        required name: str {\n            constraint exclusive;\n        };\n\n        summary: str;               # A brief description of personality and role\n        relationship_to_komi: str;  # Relationship with Komi\n        defining_trait: str;        # Primary character trait or quirk\n    }\n}","language":"gel"},{"id":"73285782-a90f-4c88-a078-1a617290f271","url":null,"code":"insert Friend {\n    name := 'Tadano Hitohito',\n    summary := 'An extremely average high school boy with a remarkable ability to read the atmosphere and understand others\\' feelings, especially Komi\\'s.',\n    relationship_to_komi := 'First friend and love interest',\n    defining_trait := 'Perceptiveness',\n};\n\ninsert Friend {\n    name := 'Osana Najimi',\n    summary := 'An extremely outgoing person who claims to have been everyone\\'s childhood friend. Gender: Najimi.',\n    relationship_to_komi := 'Second friend and social catalyst',\n    defining_trait := 'Universal childhood friend',\n};\n\ninsert Friend {\n    name := 'Yamai Ren',\n    summary := 'An intense and sometimes obsessive classmate who is completely infatuated with Komi.',\n    relationship_to_komi := 'Self-proclaimed guardian and admirer',\n    defining_trait := 'Obsessive devotion',\n};\n\ninsert Friend {\n    name := 'Katai Makoto',\n    summary := 'A intimidating-looking but shy student who shares many communication problems with Komi.',\n    relationship_to_komi := 'Fellow communication-challenged friend',\n    defining_trait := 'Scary appearance but gentle nature',\n};\n\ninsert Friend {\n    name := 'Nakanaka Omoharu',\n    summary := 'A self-proclaimed wielder of dark powers who acts like an anime character and is actually just a regular gaming enthusiast.',\n    relationship_to_komi := 'Gaming buddy and chuunibyou friend',\n    defining_trait := 'Chuunibyou tendencies',\n};","language":"edgeql"}]}],"examples":[{"id":"2413a27f-772c-42b7-b09e-614c9d6e4bda","name":"Enable AI extension","description":"Steps to enable and configure Gel's AI extension that automatically manages vector embeddings.","instructions":"1. Enable the extension in the schema and do a migration:\n```gel\n# outside of module definition\nusing extension ai;\n```\n2. Prompt the user to configure the API key:\n```edgeql\nconfigure current database\ninsert ext::ai::OpenAIProviderConfig {\n    secret := 'sk-....',\n};\n```\n3. Add `ext::ai::index` to the type (see specific example for details)\n4. Use the `ext::ai::search` function in queries (also see specific example for details)","code":[]},{"id":"60cff72d-afa3-4eb5-b93e-c6359dc44071","name":"Schema template for RAG","description":"Example schema that uses Gel's AI extension to automatically generate vector embeddings.\n","instructions":null,"code":[{"id":"35fa00b6-bbd3-4329-97d7-7cda0f947c27","url":null,"code":"module default {\n    type Type1 {\n        str_property_1: str;\n        str_property_2: str;\n\n        deferred index ext::ai::index(embedding_model := 'text-embedding-3-small')\n            on (\n                .str_property_1 ++ ' ' ++ .str_property_2  # any EdgeQL expression that returns a string\n            );\n    }\n} ","language":"gel"}]},{"id":"61885259-a0f2-4858-9e73-dc04bb22186f","name":"Python vector search query","description":"Example Python code that uses Gel AI Python binding to perform vector similarity search for a text query.","instructions":null,"code":[{"id":"f02d6e2f-8b10-4137-a8ff-3322126028b0","url":null,"code":"import gel\nimport gel.ai\n\ngel_client = gel.create_client()\ngel_ai = gel.ai.create_rag_client(client, model=\"gpt-4o-mini\")  # need to specify a language model even when now using it\n\ntext = \"test query\"\nvector = gel_ai.generate_embeddings(\n    text,\n    model=\"text-embedding-3-small\",\n)\n\ngel_client.query(\n    \"select ext::ai::search(Type1, <array<float32>>$embedding_vector\",\n    embedding_vector=vector,\n)","language":"python"}]}]}
{"id":"3d66148b-294f-4c4c-a628-086a185ad180","name":"Database setup","tests":[{"id":"67cd751e-5bd3-454d-8897-ee5048bce0b2","test_prompt":"Please setup a database for me.","expected_outcome":"Gel project must be initialized.\nIf this is a Python project, the requirements.txt must be updated to include `gel` >= to the lastest version.\nThere should not be any unrequested schema changes.","initial_state":[]}],"examples":[{"id":"6780ed36-5e31-4b21-a309-1c37fb3ac6b7","name":"Setup a gel database","description":"This is how you setup a Gel project or a setup a new Gel database.","instructions":"Initialize the Gel project with `gel project init` command. This command normally requires user input.\n\nIf the project is already setup, the above command will produce an error message saying so.\n\nIf you want to initialize the project using default settings, use the `gel project init --non-interactive` command instead.\n\nIf this is a Python project, add `gel` >= to the latest version of package to the `requirements.txt`.\n\nFinally, ask the user what kind of schema should be created and create one if necessary. This is very important, don't make any changes to the default schema unless the user specifically asks for that.","code":[]}]}
